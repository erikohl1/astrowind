---
import { getImage, type LocalImageProps, type RemoteImageProps } from 'astro:assets';
import { transformProps, type UnpicImageProps } from "@unpic/core";
import type { HTMLAttributes } from 'astro/types'
import { findImage } from '~/utils/images.ts'

type Props = LocalImageProps | UnpicImageProps<HTMLAttributes<'img'>>;

const props = Astro.props;

if (props.alt === undefined || props.alt === null) {
	throw new Error();
}

if (typeof props.width === 'string') {
	props.width = parseInt(props.width);
}

if (typeof props.height === 'string') {
	props.height = parseInt(props.height);
}

const _image = await findImage(props.src);

console.log("_image: ", _image);

let image = { src: props.src, attributes: { ...props, src: undefined, } };

if (_image !== null && typeof _image === "object") {
  props.src = _image;
  image = await getImage(props);
} else if (typeof _image === "string" && (_image.startsWith("http://") || _image.startsWith("https://"))) {
  const { src, ...attributes} = transformProps(props);

  image = {
    src: src,
    attributes: attributes
  }
}

console.log("~~~~~~~~~~ <Image>")
console.log(image);
---

{
  !image ? (
    <Fragment />
  ) : (
    <img src={image.src} {...image.attributes} />
  )
}